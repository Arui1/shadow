cmake_minimum_required(VERSION 3.2)
project(shadow)

include(cmake/ProtoBuf.cmake)

add_subdirectory(tools)

option(USE_CUDA "Using CUDA!" ON)
option(USE_CL "Using OpenCL!" OFF)
option(USE_GLog "Using GLog!" OFF)
option(USE_OpenCV "Using OpenCV to read, write and show image!" ON)
set(OpenCV_ROOT "/usr/local/opencv-3.1.0" CACHE STRING "Give the root of OpenCV!")

option(BUILD_TEST "Build gtest to test shadow!" ON)

set(CMAKE_CXX_COMPILER "/usr/bin/clang++-3.8")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L${PROJECT_SOURCE_DIR}/external/libs")

if (${USE_GLog} STREQUAL "ON")
  add_definitions(-DUSE_GLog)
endif ()

if (${USE_OpenCV} STREQUAL "ON")
  find_package(OpenCV PATHS ${OpenCV_ROOT} NO_DEFAULT_PATH)
  if (NOT OpenCV_FOUND)
    message(FATAL_ERROR "Can't find OpenCV, give the OpenCV_ROOT!")
  endif ()
  add_definitions(-DUSE_OpenCV)
  include_directories(${OpenCV_INCLUDE_DIRS})
endif ()

include_directories("inc" "src/shadow/proto" "external")
file(GLOB_RECURSE shadow_lib_src "src/shadow/*.cpp")

if (${USE_CUDA} STREQUAL "ON")
  find_package(CUDA QUIET)
  if (NOT CUDA_FOUND)
    message(WARNING "Can't find CUDA, using CPU!")
  endif ()
elseif (${USE_CL} STREQUAL "ON")
  find_package(OpenCL QUIET)
  if (NOT OpenCL_FOUND)
    message(WARNING "Can't find OpenCL, using CPU!")
  endif ()
endif ()

if (CUDA_FOUND)
  add_definitions(-DUSE_CUDA)
  set(CUDA_NVCC_FLAGS "-gencode arch=compute_30,code=\"compute_30,sm_30\"")

  file(GLOB_RECURSE shadow_cu_src "src/shadow/*.cu")
  cuda_add_library(shadow SHARED ${shadow_cu_src} ${shadow_lib_src})
  target_link_libraries(shadow proto ${CUDA_CUDART_LIBRARY} ${CUDA_cublas_LIBRARY})
endif ()

if (OpenCL_FOUND)
  add_definitions(-DUSE_CL)
  include_directories("external/EasyCL/dist/include/easycl")
  include_directories(${OpenCL_INCLUDE_DIRS})

  add_library(shadow SHARED ${shadow_lib_src})
  target_link_libraries(shadow proto clBLAS ${OpenCL_LIBRARIES})
endif ()

if ((NOT CUDA_FOUND) AND (NOT OpenCL_FOUND))
  add_library(shadow SHARED ${shadow_lib_src})
  target_link_libraries(shadow proto)
endif ()

if (USE_GLog)
  target_link_libraries(shadow glog)
endif ()

if (BUILD_TEST)
  file(GLOB_RECURSE shadow_test_src "src/test/*.cpp" "external/gtest/gtest-all.cc")
  add_executable(test_shadow ${shadow_test_src})
  target_link_libraries(test_shadow shadow pthread ${OpenCV_LIBS})
  if (OpenCL_FOUND)
    target_link_libraries(test_shadow clew EasyCL)
  endif ()
endif ()

file(GLOB yolo_src "examples/yolo/*.cpp")
add_executable(yolo ${yolo_src})
target_link_libraries(yolo shadow ${OpenCV_LIBS})
if (OpenCL_FOUND)
  target_link_libraries(yolo clew EasyCL)
endif ()

file(GLOB ssd_src "examples/ssd/*.cpp")
add_executable(ssd ${ssd_src})
target_link_libraries(ssd shadow ${OpenCV_LIBS})
if (OpenCL_FOUND)
  target_link_libraries(ssd clew EasyCL)
endif ()